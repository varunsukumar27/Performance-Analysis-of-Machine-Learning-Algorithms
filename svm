def SVM(yelp_train, yelp_test):
    w = np.empty((1,len(top500)+1), int)
    w = w*0.0
    lambda_svm = 0.01   
    step_size = 0.5              
    lr_feature = np.array(feature)
    empty = np.empty((len(yelp_train),1), int )*0+1
    lr_feature = np.append(empty,lr_feature,1)
    lr_feature = np.transpose(lr_feature)    
    lr_feature_test = np.array(test_feature)
    empty_test = np.empty((len(yelp_test),1), int )*0+1
    lr_feature_test = np.append(empty_test,lr_feature_test,1)
    lr_feature_test = np.transpose(lr_feature_test)
    del_ta = np.empty((lr_feature.shape[0],lr_feature.shape[1]), int)
    del_ta = del_ta*0.0
    y = np.empty((len(yelp_train),1), float)
    y = y*0.0
    for i in range(0,len(y)):
        if  yelp_train['classLabel'][i] == '0':
            y[i] = -1
        else:
            y[i] = 1
    for g in range(0,100):        
        wtx = np.matmul(w,lr_feature)
        for i in range(0,len(y)):
            if y[i]*wtx[:,i] < 1:
                del_ta[:,i] = y[i]*lr_feature[:,i]
            else:
                del_ta[:,i] = 0
        delt_a = np.transpose(del_ta)
        sumation = np.empty((1,w.shape[1]), int)
        sumation = sumation*0.0
        for i in range(0,len(delt_a)):
            temp_sum = lambda_svm*w - delt_a[i,]
            sumation = sumation + temp_sum
        delta = sumation/len(yelp_train)
        w_new = w - step_size*delta
        if np.linalg.norm(np.array(w_new)-np.array(w)) == 1*math.exp(-6):
            #print("If:", np.linalg.norm(np.array(w_new)-np.array(w)) == 1*math.exp(-6))
            break
        else:
            w = w_new
    prediction = np.empty((len(yelp_test),1), float ) 
    for r in range(0,len(yelp_test)):
        wtx_test = np.matmul(w,lr_feature_test)
    for h in range(0,len(yelp_test)):
        if wtx_test[:,h] >= 0:
            prediction[h] = 1
        else:
            prediction[h] = -1
    y_test = np.empty((len(yelp_test),1), float)
    y_test = y_test*0.0
    for i in range(0,len(y_test)):
        if  yelp_test['classLabel'][i] == '0':
            y_test[i] = -1
        else:
            y_test[i] = 1
    count = 0
    
    for i in range(0,len(prediction)):
        if float(y_test[i]) != prediction[i]:
            count = count+1
    
    zeroOneError = count/len(yelp_test)
    #return zeroOneError
    print("ZERO-ONE-LOSS-SVM ", zeroOneError)
